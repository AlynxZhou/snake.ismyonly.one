// Generated by CoffeeScript 1.12.6
(function() {
  var App, app,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    function App() {
      this.refresh = bind(this.refresh, this);
      this.death = bind(this.death, this);
      this.stop = bind(this.stop, this);
      this.start = bind(this.start, this);
      this.main = bind(this.main, this);
      this.renderPresent = bind(this.renderPresent, this);
      this.checkHeadCollision = bind(this.checkHeadCollision, this);
      this.checkAllPos = bind(this.checkAllPos, this);
      this.checkPos = bind(this.checkPos, this);
      this.moveSnake = bind(this.moveSnake, this);
      this.deleteSnakeTail = bind(this.deleteSnakeTail, this);
      this.insertSnakeHead = bind(this.insertSnakeHead, this);
      this.changeSnakeMove = bind(this.changeSnakeMove, this);
      this.handleTouchEnd = bind(this.handleTouchEnd, this);
      this.handleTouchStart = bind(this.handleTouchStart, this);
      this.handleKeyDown = bind(this.handleKeyDown, this);
      this.createSnake = bind(this.createSnake, this);
      this.isFoodInSnake = bind(this.isFoodInSnake, this);
      this.createFood = bind(this.createFood, this);
      this.canvas = document.getElementById("canvas");
      this.ctx = this.canvas.getContext("2d");
      this.switchButton = document.getElementById("switch");
      this.refreshButton = document.getElementById("refresh");
      this.unitNum = 30;
      this.unitSize = Math.floor(this.canvas.height / this.unitNum);
      this.timerID = null;
      this.touchStart = [];
      this.opposite = {
        "UP": "DOWN",
        "DOWN": "UP",
        "LEFT": "RIGHT",
        "RIGHT": "LEFT"
      };
      this.refresh();
      addEventListener("keydown", this.handleKeyDown, false);
      this.canvas.addEventListener("touchstart", this.handleTouchStart, false);
      this.canvas.addEventListener("touchmove", this.handleTouchMove, false);
      this.canvas.addEventListener("touchend", this.handleTouchEnd, false);
    }

    App.prototype.createFood = function() {
      var results;
      this.food = [Math.floor(Math.random() * this.unitNum), Math.floor(Math.random() * this.unitNum)];
      this.checkPos(this.food);
      results = [];
      while (this.isFoodInSnake()) {
        this.food = [Math.floor(Math.random() * this.unitNum), Math.floor(Math.random() * this.unitNum)];
        results.push(this.checkPos(this.Food));
      }
      return results;
    };

    App.prototype.isFoodInSnake = function() {
      var body, j, len, ref;
      ref = this.snake.list;
      for (j = 0, len = ref.length; j < len; j++) {
        body = ref[j];
        if (this.food[0] === body[0] && this.food[1] === body[1]) {
          return true;
        }
      }
      return false;
    };

    App.prototype.createSnake = function() {
      var head_x, head_y, i, j, list, move;
      list = [];
      head_x = Math.floor(Math.random() * this.unitNum);
      head_y = Math.floor(Math.random() * this.unitNum);
      for (i = j = 0; j < 4; i = ++j) {
        list.push([head_x - i, head_y]);
      }
      move = "RIGHT";
      this.snake.list = list;
      return this.snake.move = move;
    };

    App.prototype.handleKeyDown = function(event) {
      var move;
      switch (event.keyCode) {
        case 38:
          move = "UP";
          break;
        case 40:
          move = "DOWN";
          break;
        case 37:
          move = "LEFT";
          break;
        case 39:
          move = "RIGHT";
          break;
        case 87:
          move = "UP";
          break;
        case 83:
          move = "DOWN";
          break;
        case 65:
          move = "LEFT";
          break;
        case 68:
          move = "RIGHT";
          break;
        case 32:
          event.preventDefault();
          this.switchButton.onclick();
          break;
        case 13:
          event.preventDefault();
          this.refreshButton.onclick();
      }
      if (move != null) {
        event.preventDefault();
        return this.moveQueue.push(move);
      }
    };

    App.prototype.handleTouchStart = function(event) {
      if (event.touches.length > 1 || event.targetTouches.length > 1) {
        return -1;
      }
      this.touchStart.push([event.touches[0].clientX, event.touches[0].clientY]);
      return event.preventDefault();
    };

    App.prototype.handleTouchMove = function(event) {
      return event.preventDefault();
    };

    App.prototype.handleTouchEnd = function(event) {
      var absDx, absDy, dx, dy, move;
      if (event.touches.length || event.targetTouches.length > 0) {
        return -1;
      }
      dx = event.changedTouches[0].clientX - this.touchStart[0];
      dy = event.changedTouches[0].clientY - this.touchStart[1];
      absDx = Math.abs(dx);
      absDy = Math.abs(dy);
      this.touchStart.shift();
      if (Math.max(absDx, absDy) > 30) {
        move = (absDx > absDy ? (dx > 0 ? "RIGHT" : "LEFT") : (dy > 0 ? "DOWN" : "UP"));
        event.preventDefault();
        return this.moveQueue.push(move);
      }
    };

    App.prototype.changeSnakeMove = function() {
      while (this.moveQueue.length && (this.snake.move === this.opposite[this.moveQueue[0]] || this.moveQueue[0] === this.moveQueue[1])) {
        this.moveQueue.shift();
      }
      if (this.moveQueue.length) {
        return this.snake.move = this.moveQueue.shift();
      }
    };

    App.prototype.insertSnakeHead = function() {
      var head_x, head_y;
      head_x = this.snake.list[0][0];
      head_y = this.snake.list[0][1];
      switch (this.snake.move) {
        case "UP":
          return this.snake.list.unshift([head_x, head_y - 1]);
        case "DOWN":
          return this.snake.list.unshift([head_x, head_y + 1]);
        case "LEFT":
          return this.snake.list.unshift([head_x - 1, head_y]);
        case "RIGHT":
          return this.snake.list.unshift([head_x + 1, head_y]);
      }
    };

    App.prototype.deleteSnakeTail = function() {
      return this.snake.list.pop();
    };

    App.prototype.moveSnake = function() {
      this.changeSnakeMove();
      this.insertSnakeHead();
      this.checkAllPos();
      switch (this.checkHeadCollision()) {
        case 1:
          return this.createFood();
        case 0:
          return this.deleteSnakeTail();
        case -1:
          this.deleteSnakeTail();
          return -1;
      }
    };

    App.prototype.checkPos = function(point) {
      point[0] %= this.unitNum;
      point[1] %= this.unitNum;
      while (point[0] < 0) {
        point[0] += this.unitNum;
      }
      while (point[1] < 0) {
        point[1] += this.unitNum;
      }
      return point;
    };

    App.prototype.checkAllPos = function() {
      var body;
      this.food = this.checkPos(this.food);
      return this.snake.list = (function() {
        var j, len, ref, results;
        ref = this.snake.list;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          body = ref[j];
          results.push(this.checkPos(body));
        }
        return results;
      }).call(this);
    };

    App.prototype.checkHeadCollision = function() {
      var body, j, len, ref;
      ref = this.snake.list.slice(1, this.snake.list.length - 1);
      for (j = 0, len = ref.length; j < len; j++) {
        body = ref[j];
        if (this.snake.list[0][0] === body[0] && this.snake.list[0][1] === body[1]) {
          return -1;
        }
      }
      if (this.snake.list[0][0] === this.food[0] && this.snake.list[0][1] === this.food[1]) {
        return 1;
      }
      return 0;
    };

    App.prototype.renderPresent = function() {
      var body, j, len, ref, results;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.fillStyle = "rgba(0, 0, 200, 0.7)";
      this.ctx.fillRect(this.food[0] * this.unitSize, this.food[1] * this.unitSize, this.unitSize, this.unitSize);
      this.ctx.fillStyle = "rgba(200, 0, 0, 0.7)";
      this.ctx.fillRect(this.snake.list[0][0] * this.unitSize, this.snake.list[0][1] * this.unitSize, this.unitSize, this.unitSize);
      ref = this.snake.list.slice(1, this.snake.list.length);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        body = ref[j];
        this.ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
        results.push(this.ctx.fillRect(body[0] * this.unitSize, body[1] * this.unitSize, this.unitSize, this.unitSize));
      }
      return results;
    };

    App.prototype.main = function() {
      if (this.moveSnake() === -1) {
        this.death();
      }
      return this.renderPresent();
    };

    App.prototype.start = function() {
      this.timerID = setInterval(this.main, 150);
      this.switchButton.innerHTML = "暂停";
      return this.switchButton.onclick = this.stop;
    };

    App.prototype.stop = function() {
      clearInterval(this.timerID);
      this.switchButton.innerHTML = "继续";
      return this.switchButton.onclick = this.start;
    };

    App.prototype.death = function() {
      clearInterval(this.timerID);
      this.switchButton.innerHTML = "死啦";
      return this.switchButton.onclick = this.refresh;
    };

    App.prototype.refresh = function() {
      if (this.timerID != null) {
        clearInterval(this.timerID);
      }
      this.moveQueue = [];
      this.food = [];
      this.snake = {};
      this.createSnake();
      this.createFood();
      this.renderPresent();
      this.switchButton.innerHTML = "开始";
      this.switchButton.onclick = this.start;
      this.refreshButton.innerHTML = "重来";
      return this.refreshButton.onclick = this.refresh;
    };

    return App;

  })();

  app = new App();

}).call(this);
